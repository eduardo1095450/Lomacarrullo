"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var characters_json_1 = __importDefault(require("./characters.json"));
var upper = function (str) { return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase(); };
var upperAllWords = function (str) {
    return str
        .split(' ')
        .map(function (word) { return upper(word); })
        .join(' ');
};
/**
 * Replace special characters in a string with unicode letters.
 * @param {String} txt A string to clean
 * @param {Options} options An object containing two optionnal parameters : capitalizeFirstLetter and capitalizeAllWords
 * @returns {String} The cleaned string
 */
function clean(txt, options) {
    if (typeof txt !== 'string')
        throw new Error('Parameter txt must be a string !');
    var capitalizeFirstLetter = options &&
        typeof options === 'object' &&
        options.capitalizeFirstLetter &&
        typeof options.capitalizeFirstLetter === 'boolean'
        ? options.capitalizeFirstLetter
        : false;
    var capitalizeAllWords = options &&
        typeof options === 'object' &&
        options.capitalizeAllWords &&
        typeof options.capitalizeAllWords === 'boolean'
        ? options.capitalizeAllWords
        : false;
    var keepUnrecognized = options && typeof options === 'object' && options.keepUnrecognized && typeof options.keepUnrecognized === 'boolean'
        ? options.keepUnrecognized
        : false;
    var results = __spread(txt).map(function (char) { return (characters_json_1.default[char] ? characters_json_1.default[char] : keepUnrecognized ? char : ''); })
        .join('')
        .trim();
    return capitalizeAllWords ? upperAllWords(results) : capitalizeFirstLetter ? upper(results) : results;
}
module.exports = clean;
